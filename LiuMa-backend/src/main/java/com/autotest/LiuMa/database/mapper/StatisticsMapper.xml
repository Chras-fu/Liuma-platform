<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.autotest.LiuMa.database.mapper.StatisticsMapper">
  <insert id="updateDailyData" parameterType="com.autotest.LiuMa.database.domain.DailyStatistics">
    insert into `daily_statistics` (id, stat_date, project_id, api_case_new, web_case_new, api_case_sum,
    web_case_sum, api_case_run, web_case_run, api_case_pass_rate, web_case_pass_rate)
    values
    <foreach collection="list" item="item" separator="," index="index">
      (#{item.id}, #{item.statDate}, #{item.projectId}, #{item.apiCaseNew}, #{item.webCaseNew}, #{item.apiCaseSum},
      #{item.webCaseSum}, #{item.apiCaseRun}, #{item.webCaseRun}, #{item.apiCasePassRate}, #{item.webCasePassRate})
    </foreach>
    ON DUPLICATE KEY UPDATE
    api_case_new = VALUES(api_case_new),
    web_case_new = VALUES(web_case_new),
    api_case_sum = VALUES(api_case_sum),
    web_case_sum = VALUES(web_case_sum),
    api_case_run = VALUES(api_case_run),
    web_case_run = VALUES(web_case_run),
    api_case_pass_rate = VALUES(api_case_pass_rate),
    web_case_pass_rate = VALUES(web_case_pass_rate)
  </insert>
  <insert id="updateSumData" parameterType="com.autotest.LiuMa.database.domain.SumStatistics">
    insert into `sum_statistics` (id, project_id, api_case_total, api_case_new_week, web_case_total, web_case_new_week,
    plan_run_total, plan_run_today, case_run_total, case_run_today, plan_run_week_top, case_fail_week_top)
    values
    <foreach collection="list" item="item" separator="," index="index">
      (#{item.id}, #{item.projectId}, #{item.apiCaseTotal}, #{item.apiCaseNewWeek}, #{item.webCaseTotal}, #{item.webCaseNewWeek},
      #{item.planRunTotal}, #{item.planRunToday}, #{item.caseRunTotal}, #{item.caseRunToday}, #{item.planRunWeekTop}, #{item.caseFailWeekTop})
    </foreach>
    ON DUPLICATE KEY UPDATE
    api_case_total = VALUES(api_case_total),
    api_case_new_week = VALUES(api_case_new_week),
    web_case_total = VALUES(web_case_total),
    web_case_new_week = VALUES(web_case_new_week),
    plan_run_total = VALUES(plan_run_total),
    plan_run_today = VALUES(plan_run_today),
    case_run_total = VALUES(case_run_total),
    case_run_today = VALUES(case_run_today),
    plan_run_week_top = VALUES(plan_run_week_top),
    case_fail_week_top = VALUES(case_fail_week_top)
  </insert>
  <select id="getDailyDataByProject" parameterType="java.lang.String" resultType="com.autotest.LiuMa.database.domain.DailyStatistics">
    select * from daily_statistics where project_id = #{projectId} order by stat_date desc limit 7
  </select>
  <select id="getSumDataByProject" parameterType="java.lang.String" resultType="com.autotest.LiuMa.database.domain.SumStatistics">
    select * from sum_statistics where project_id = #{projectId}
  </select>
  <select id="getCaseCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select project_id, `type` as name, count(id) as `count` from `case`
    where `status` != 'Trash'
    group by project_id, `type`
  </select>
  <select id="getCaseTodayNewCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select project_id, `type` as name, count(id) as `count` from `case`
    where create_time &gt; UNIX_TIMESTAMP(CAST(SYSDATE()AS DATE))*1000 and `status` != 'Trash'
    group by project_id, `type`
  </select>
  <select id="getCaseWeekNewCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select project_id, `type` as name, count(id) as `count` from `case`
    where create_time &gt; UNIX_TIMESTAMP(CAST(SYSDATE()AS DATE) - INTERVAL 7 DAY)*1000 and `status` != 'Trash'
    group by project_id, `type`
  </select>
  <select id="getCaseTodayRunCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select r.project_id, c.type as name, count(rcc.id) as `count`, (sum(rcc.status='success')/count(rcc.id)*100) as passRate
    from report_collection_case rcc
    left join `case` c on c.id = rcc.case_id
    left join report_collection rc on rc.id = rcc.report_collection_id
    left join report r on r.id = rc.report_id
    where r.create_time &gt; UNIX_TIMESTAMP(CAST(SYSDATE()AS DATE))*1000 and r.source_type != 'temp'
    and c.status != 'Trash'
    group by r.project_id, c.type
  </select>
  <select id="getCaseTotalRunCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select r.project_id, count(rcc.id) as `count` from report_collection_case rcc
    left join `case` c on c.id = rcc.case_id
    left join report_collection rc on rc.id = rcc.report_collection_id
    left join report r on r.id = rc.report_id
    where r.source_type != 'temp' and c.status != 'Trash'
    group by r.project_id
  </select>
  <select id="getCaseTotalTodayRunCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select r.project_id, count(rcc.id) as `count` from report_collection_case rcc
    left join `case` c on c.id = rcc.case_id
    left join report_collection rc on rc.id = rcc.report_collection_id
    left join report r on r.id = rc.report_id
    where r.create_time &gt; UNIX_TIMESTAMP(CAST(SYSDATE()AS DATE))*1000 and r.source_type != 'temp'
    and c.status != 'Trash'
    group by r.project_id
  </select>
  <select id="getPlanRunCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select project_id, count(id) as `count` from `report`
    where source_type = 'plan'
    group by project_id
  </select>
  <select id="getPlanTodayRunCountByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select project_id, count(id) as `count` from `report`
    where create_time &gt; UNIX_TIMESTAMP(CAST(SYSDATE()AS DATE))*1000 and source_type = 'plan'
    group by project_id
  </select>
  <select id="getPlanRunTopByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select r.project_id, p.id, p.name, count(r.id) as `count`, sum(r.`status`='success') as `pass`,
    (sum(rs.pass_count)/sum(rs.total)*100) as `passRate` from `report` r
    left join `plan` p on p.id = r.source_id
    left join report_statistics rs on rs.report_id = r.id
    where r.create_time &gt; (unix_timestamp(current_timestamp(3))-7*24*60*60)*1000 and r.source_type = 'plan'
    group by r.project_id, r.source_id order by `count` desc limit 10
  </select>
  <select id="getCaseFailTopByProject" resultType="com.autotest.LiuMa.dto.StatisticsDTO">
    select r.project_id, c.id, c.name, count(rcc.id) as `count` from report_collection_case rcc
    left join `case` c on c.id = rcc.case_id
    left join report_collection rc on rc.id = rcc.report_collection_id
    left join report r on r.id = rc.report_id
    where r.create_time &gt; (unix_timestamp(current_timestamp(3))-7*24*60*60)*1000 and r.source_type != 'temp'
    and c.status != 'Trash' and rcc.status != 'success'
    group by rcc.case_id order by `count` desc limit 10
  </select>

</mapper>